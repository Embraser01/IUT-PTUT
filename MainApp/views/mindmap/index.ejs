<h1> This is the mindmap number <%= mindmap.id %></h1>

<input type="text" name="message" id="message" placeholder="Votre message..." size="50" autofocus/>
<button onclick="sendMessage()">Envoyer</button>

<ul>
    <% for(var i = 0; i < messages.length; i++) { %>
    <li><%= messages[i].owner.firstname + ' ' + messages[i].owner.name + ' : ' + messages[i].data %></li>
    <% } %>
</ul>


<div style="position:fixed;z-index:10;top:10px;left:5px;">
    <button disabled id="">Out: New node</button>
    <button disabled id="">Out: Select node</button>
    <button disabled id="">Out: Unselect node</button>
    <!--<button disabled id="">Out: Force unselect</button>-->
    <button id="out_modify">Out: Modify node</button>
    <button disabled id="">Out: Modify nodes</button>
    <button id="out_delete">Out: Delete node</button>
</div>

<div style="position:fixed;z-index:10;bottom:10px;right:5px;">
    <button id="in_new">In: New node</button>
    <button id="in_select">In: Select node</button>
    <button id="in_unselect">In: Unselect node</button>
    <!--<button id="">In: Force loose node selection</button>-->
    <button id="in_modify">In: Modify node</button>
    <button id="in_delete">In: Delete node</button>
</div>

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="container" width="100%"
     height="100%" style="background-color: #eceff1;">


    <filter id="drop-shadow" color-interpolation-filters="sRGB" x="-50%" y="-50%" height="200%" width="200%">
        <!-- Take source alpha, offset it by angle/distance and blur it by size -->

        <feOffset id="offset" in="SourceAlpha" dx="6.02" dy="6.69" result="SA-offset"/>
        <feGaussianBlur id="blur" in="SA-offset" stdDeviation="9.25" result="SA-o-blur"/>

        <!-- Apply a contour by using a color curve transform on the alpha and clipping the result to the input -->

        <feComponentTransfer in="SA-o-blur" result="SA-o-b-contIN">
            <feFuncA id="contour" type="table" tableValues="0 1"/>
        </feComponentTransfer>

        <feComposite operator="in" in="SA-o-blur" in2="SA-o-b-contIN" result="SA-o-b-cont"/>

        <!-- Adjust the spread by multiplying alpha by a constant factor -->
        <feComponentTransfer in="SA-o-b-cont" result="SA-o-b-c-sprd">
            <feFuncA id="spread-ctrl" type="linear" slope="3"/>
        </feComponentTransfer>

        <!-- Adjust color and opacity by adding fixed offsets and an opacity multiplier -->
        <feColorMatrix id="recolor" in="SA-o-b-c-sprd" type="matrix"
                       values="0 0 0 0 0.439 0 0 0 0 0.439 0 0 0 0 0.439 0 0 0 0.75 0" result="SA-o-b-c-s-recolor"/>

        <!-- Generate a reasonably grainy noise input with baseFrequency between approx .5 to 2.0. And add the noise with k1 and k2 multipliers that sum to 1 -->
        <feTurbulence result="fNoise" type="fractalNoise" numOctaves="6" baseFrequency="1.98"/>
        <feColorMatrix in="fNoise" type="matrix" values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 7 -3" result="clipNoise"/>
        <feComposite id="noisemix" operator="arithmetic" in="SA-o-b-c-s-recolor" in2="clipNoise" k1="0" k2="1"
                     result="SA-o-b-c-s-r-mix"/>

        <!-- Merge the shadow with the original -->
        <feMerge>
            <feMergeNode in="SA-o-b-c-s-r-mix"/>
            <feMergeNode in="SourceGraphic"/>
        </feMerge>
    </filter>
</svg>


<script src="/js/ignore/app.js"></script>
<script>
    window.onload = function () {

        var Mindmap = new MindmapFrame(document.getElementById('container'));

        window.onmousedown = Mindmap.eventManager.on;
        window.onmouseup = Mindmap.eventManager.on;
        window.onmousemove = Mindmap.eventManager.on;
        window.onwheel = Mindmap.eventManager.on;
        window.onmousewheel = Mindmap.eventManager.on;
        window.ondblclick = Mindmap.eventManager.on;


        document.getElementById('out_modify').onclick = function () {
            if (Mindmap.getSelectedNode() != null)
                Mindmap.getSelectedNode().editNode(mindmap.worker, 'Edited node', {
                    "font": {
                        "weight": "bold",
                        "style": "italic",
                        "decoration": "strike"
                    }
                });
        }

        document.getElementById('out_delete').onclick = function () {
            if (Mindmap.getSelectedNode() != null)
                Mindmap.deleteSelectedNode();
        }


        document.getElementById('in_new').onclick = function () {


            var style = {
                order: 1,
                dx: 1,
                container: {
                    kind: "rectangle",
                    borderThickness: "0",
                    borderColor: "#263238",
                    background: "white",
                    radius: "7"
                },
                font: {
                    family: "sans-serif",
                    size: "24",
                    color: "#006064",
                    weight: "bold ",
                    style: "italic ",
                    decoration: "none",
                    align: "right"
                },
                parentBranch: {
                    color: "#42a5f5"
                },
                unifiedChildren: {
                    dx: false,
                    container: false,
                    font: false,
                    parentBranch: false
                }
            };

            mindmap.ioManager.out.newNode(0, null, null, style)
        }

        document.getElementById('in_select').onclick = function () {


            if (mindmap.workers[2] == null || mindmap.workers[2] == 4)
                mindmap.ioManager.in.selectNode(2, 1);
            else
                mindmap.ioManager.in.selectNode(2, 4);

            mindmap.ioManager.in.selectNode(2, mindmap.workers[2]);
        }

        document.getElementById('in_unselect').onclick = function () {
            mindmap.ioManager.in.unselectNode(2, mindmap.workers[2]);
        }

        document.getElementById('in_modify').onclick = function () {
            mindmap.ioManager.in.editNode(2, {
                id: mindmap.workers[2],
                textContent: "Edited by other",
                style: {font: {color: "pink"}}
            });

        }

        document.getElementById('in_delete').onclick = function () {
            mindmap.ioManager.in.deleteNode(2, 1);
        }


    }
</script>